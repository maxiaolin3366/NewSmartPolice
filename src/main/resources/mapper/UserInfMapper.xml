<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.smartpolice.dao.UserInfMapper">
    <resultMap id="BaseResultMap" type="cn.smartpolice.entity.UserInf">
        <result column="userid" jdbcType="INTEGER" property="userid"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="sets" jdbcType="CHAR" property="sets"/>
        <result column="regdate" jdbcType="TIMESTAMP" property="regdate"/>
        <result column="authority" jdbcType="CHAR" property="authority"/>
        <result column="birth" jdbcType="DATE" property="birth"/>
        <result column="name" jdbcType="CHAR" property="name"/>
        <result column="sex" jdbcType="CHAR" property="sex"/>
        <result column="type" jdbcType="CHAR" property="type"/>
        <result column="state" jdbcType="CHAR" property="state"/>
        <result column="mail" jdbcType="VARCHAR" property="mail"/>
        <result column="mphone" jdbcType="VARCHAR" property="mphone"/>
    </resultMap>
    <select id="selectUserBySid" parameterType="Integer" resultMap="BaseResultMap">
        select * from user_inf where userid = #{sid}
    </select>
    <select id="selectUserByUserName" parameterType="String" resultMap="BaseResultMap">
        select * from user_inf where username = #{username}
    </select>
    <update id="updateUserInf" parameterType="cn.smartpolice.entity.UserInf">
        update user_inf set
        username=#{username},passworld=#{passworld},sets=#{sets},authority=#{authority},birth=#{birth},name=#{name},sex=#{sex},type=#{type},mail=#{mail},mphone=#{mphone}
        where userid=#{userid}
    </update>
    <update id="changeStateToZeroById" parameterType="Integer">
        update user_inf set state = 0 where userid = #{userId}
    </update>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        userid, username, password, sets, regdate, authority, birth, name, sex, type, state,
        mail, mphone
    </sql>
    <select id="selectByExample" parameterType="cn.smartpolice.entity.UserInfExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from user_inf
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="deleteByExample" parameterType="cn.smartpolice.entity.UserInfExample">
        delete from user_inf
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.smartpolice.entity.UserInf">
        <selectKey keyProperty="userid" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user_inf (userid, username, password,
        sets, regdate, authority,
        birth, name, sex, type,
        state, mail, mphone)
        values (#{userid,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{sets,jdbcType=CHAR}, #{regdate,jdbcType=TIMESTAMP}, #{authority,jdbcType=CHAR},
        #{birth,jdbcType=DATE}, #{name,jdbcType=CHAR}, #{sex,jdbcType=CHAR}, #{type,jdbcType=CHAR},
        #{state,jdbcType=CHAR}, #{mail,jdbcType=VARCHAR}, #{mphone,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="cn.smartpolice.entity.UserInf">
        insert into user_inf
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userid != null">
                userid,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="sets != null">
                sets,
            </if>
            <if test="regdate != null">
                regdate,
            </if>
            <if test="authority != null">
                authority,
            </if>
            <if test="birth != null">
                birth,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="mail != null">
                mail,
            </if>
            <if test="mphone != null">
                mphone,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userid != null">
                #{userid,jdbcType=INTEGER},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="sets != null">
                #{sets,jdbcType=CHAR},
            </if>
            <if test="regdate != null">
                #{regdate,jdbcType=TIMESTAMP},
            </if>
            <if test="authority != null">
                #{authority,jdbcType=CHAR},
            </if>
            <if test="birth != null">
                #{birth,jdbcType=DATE},
            </if>
            <if test="name != null">
                #{name,jdbcType=CHAR},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=CHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=CHAR},
            </if>
            <if test="state != null">
                #{state,jdbcType=CHAR},
            </if>
            <if test="mail != null">
                #{mail,jdbcType=VARCHAR},
            </if>
            <if test="mphone != null">
                #{mphone,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.smartpolice.entity.UserInfExample" resultType="java.lang.Integer">
        select count(*) from user_inf
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update user_inf
        <set>
            <if test="record.userid != null">
                userid = #{record.userid,jdbcType=INTEGER},
            </if>
            <if test="record.username != null">
                username = #{record.username,jdbcType=VARCHAR},
            </if>
            <if test="record.password != null">
                password = #{record.password,jdbcType=VARCHAR},
            </if>
            <if test="record.sets != null">
                sets = #{record.sets,jdbcType=CHAR},
            </if>
            <if test="record.regdate != null">
                regdate = #{record.regdate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.authority != null">
                authority = #{record.authority,jdbcType=CHAR},
            </if>
            <if test="record.birth != null">
                birth = #{record.birth,jdbcType=DATE},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=CHAR},
            </if>
            <if test="record.sex != null">
                sex = #{record.sex,jdbcType=CHAR},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=CHAR},
            </if>
            <if test="record.state != null">
                state = #{record.state,jdbcType=CHAR},
            </if>
            <if test="record.mail != null">
                mail = #{record.mail,jdbcType=VARCHAR},
            </if>
            <if test="record.mphone != null">
                mphone = #{record.mphone,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update user_inf
        set userid = #{record.userid,jdbcType=INTEGER},
        username = #{record.username,jdbcType=VARCHAR},
        password = #{record.password,jdbcType=VARCHAR},
        sets = #{record.sets,jdbcType=CHAR},
        regdate = #{record.regdate,jdbcType=TIMESTAMP},
        authority = #{record.authority,jdbcType=CHAR},
        birth = #{record.birth,jdbcType=DATE},
        name = #{record.name,jdbcType=CHAR},
        sex = #{record.sex,jdbcType=CHAR},
        type = #{record.type,jdbcType=CHAR},
        state = #{record.state,jdbcType=CHAR},
        mail = #{record.mail,jdbcType=VARCHAR},
        mphone = #{record.mphone,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
</mapper>